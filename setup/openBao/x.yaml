apiVersion: batch/v1
kind: CronJob
metadata:
  name: openbao-unseal
  labels:
    app.kubernetes.io/name: openbao
    app.kubernetes.io/instance: openbao
    app.kubernetes.io/managed-by: Helm
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
  # This CronJob will run every 2 minutes to unseal OpenBao Vault
  # and ensure it is ready for use.
  # It uses the unseal keys stored in the ConfigMap 'openbao-unseal-config'.
spec:
  schedule: */2 * * * * # Every 2 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: openbao
        app.kubernetes.io/instance: openbao
        app.kubernetes.io/managed-by: Helm
    name: openbao-unseal
    namespace: openbao
data:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: openbao-unseal
            image: busybox:1.28
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - | #!/bin/bash
############################################################################################
#
# Unseal OpenBao on MicroK8s
#
# https://openbao.org/
# https://openbao.org/docs/platform/k8s/helm/
# https://www.linode.com/docs/guides/deploy-openbao-on-linode-kubernetes-engine/
#
############################################################################################
#shopt -o -s errexit    #—Terminates  the shell script  if a command returns an error code.
#shopt -o -s xtrace #—Displays each command before it's executed.
#shopt -o -s nounset #-No Variables without definition
set -euo pipefail

# Unseal OpenBao Vault
echo "Unseal keys and initial root token are stored in the ConfigMap 'openbao-unseal-config' in the 'openbao' namespace."
mypod=$(microk8s kubectl get pods -l app.kubernetes.io/name=openbao -n openbao -o jsonpath='{.items[0].metadata.name}')
sealed=$(microk8s kubectl exec -i ${mypod} -n openbao -- bao status | grep -i Sealed) || true
if [[ -z "${sealed}" ]]; then
  echo "OpenBao Vault is not running or the pod is not available."
  exit 1
fi
sealed=${sealed#* }  # remove prefix ending in " "
sealed_status=$(echo -e "${sealed}" | tr -d '[:space:]')
if [[ "${sealed_status}" != "false" ]]; then
  echo "OpenBao Vault is still sealed. Unsealing is required. #${sealed_status}#"
  mymap=$(microk8s kubectl get configmaps -n openbao openbao-unseal-config -o yaml)
  echo "# Unsealing OpenBao Vault..." > /tmp/unseal_openbao.sh
  while IFS= read -r line; 
  do 
    #echo "${line}"; 
    key=${line#*:}   # remove prefix ending in ":"
    #echo "${key}"; 
    echo "microk8s kubectl exec -i ${mypod} -n openbao -- bao operator unseal "${key} >> /tmp/unseal_openbao.sh
  done < <(echo "${mymap}" | grep -i " Unseal Key ")
  chmod 755 /tmp/unseal_openbao.sh
  /tmp/unseal_openbao.sh
  echo "OpenBao Vault has been unsealed successfully."

  # Clean up temporary files
  rm -f /tmp/unseal_openbao.sh
else
  echo "OpenBao Vault is already unsealed."
  exit 0
fi
          restartPolicy: OnFailure
