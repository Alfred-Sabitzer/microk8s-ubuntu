# Alpine is chosen for its small footprint compared to Ubuntu
FROM golang:alpine as golang

# timezone support
ENV TZ=Europe/Vienna
RUN apk add --update tzdata --no-cache &&\
    cp /usr/share/zoneinfo/${TZ} /etc/localtime &&\
    echo $TZ > /etc/timezone

# Set destination for COPY
WORKDIR /app

# Copy the source code. Note the slash at the end, as explained in
# https://docs.docker.com/reference/dockerfile/#copy
COPY . ./

# Build
ENV CGO_ENABLED=0
ENV GOOS=linux

#RUN go mod init validatingwebhook
RUN go install ./admissioncontroller/*
RUN go install ./deployments/*
RUN go install ./pods/*
RUN go install ./http/*
RUN go mod tidy
RUN go mod download
RUN go mod verify
RUN go build -a -ldflags '-extldflags "-static"' -o serverd main.go


# Build Small deployable Image
FROM scratch

LABEL maintainer="slainte@slainte.at"
LABEL Description="Validating Web Hook Example"
LABEL http="https://gitlab.com/Alfred-Sabitzer/microk8s-ubuntu/-/tree/master/CheckSecretValidating/Examples/ValidatingWebhook?ref_type=heads"

COPY --from=golang /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=golang /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=golang /etc/passwd /etc/passwd
COPY --from=golang /etc/group /etc/group

COPY --from=golang /app/serverd .

# Optional:
# To bind to a TCP port, runtime parameters must be supplied to the docker command.
# But we can document in the Dockerfile what ports
# the application is going to listen on by default.
# https://docs.docker.com/reference/dockerfile/#expose
EXPOSE 443

# Run
CMD ["/serverd --port 443"]